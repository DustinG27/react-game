{"ast":null,"code":"var _jsxFileName = \"/Users/dusting27/Desktop/react-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport BeerCard from \"./components/BeerCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport beers from \"./beers.json\"; // function to shuffle and return array\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n\n  return array;\n}\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      beers,\n      title: \"Click any beer you'd like!\",\n      currentScore: 0,\n      highScore: 0,\n      clickedBeer: []\n    };\n\n    this.shuffleArray = () => {\n      this.setState({\n        beers: shuffle(beers)\n      });\n    };\n\n    this.gameReset = () => {\n      this.setState({\n        title: \"Oops, try again.\",\n        currentScore: 0,\n        highScore: this.state.highScore,\n        clickedBeer: []\n      });\n      this.shuffleArray();\n    };\n\n    this.handleIncrement = () => {\n      const newScore = this.state.currentScore + 1;\n      this.setState({\n        currentScore: newScore,\n        title: 'Keep Moving!'\n      });\n\n      if (newScore === 15) {\n        this.setState({\n          message: 'Winner Winner Chicken Dinner!'\n        });\n        this.gameReset();\n      } else {\n        this.setState({\n          highScore: newScore\n        });\n      }\n    };\n\n    this.clickedBeer = id => {\n      // tests if click function is connected\n      // console.log(id)\n      // if statement will push id's into an array then check for multiples\n      if (clickedBeer.indexOf(id) === -1) {} // if (currentScore > highScore) {\n      //   this.setState({\n      //     topScore: currentScore\n      //   });\n      // }\n\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: this.state.title,\n        currentScore: this.state.currentScore,\n        highScore: this.state.highScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), this.state.beers.map(beer => /*#__PURE__*/_jsxDEV(BeerCard, {\n        clickedBeer: this.clickedBeer,\n        id: beer.id,\n        name: beer.name,\n        image: beer.image,\n        style: beer.style,\n        notes: beer.notes\n      }, beer.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dusting27/Desktop/react-game/src/App.js"],"names":["React","Component","BeerCard","Wrapper","Header","beers","shuffle","array","i","length","j","Math","floor","random","App","state","title","currentScore","highScore","clickedBeer","shuffleArray","setState","gameReset","handleIncrement","newScore","message","id","indexOf","render","map","beer","name","image","style","notes"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport BeerCard from \"./components/BeerCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport beers from \"./beers.json\";\n\n// function to shuffle and return array\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  // Setting state to beers.json and other global variables\n  state = {\n    beers,\n    title: \"Click any beer you'd like!\",\n    currentScore: 0,\n    highScore: 0,\n    clickedBeer: []\n  };\n\n   //shuffle the list on each click\n   shuffleArray = () => {\n    this.setState({ beers: shuffle(beers) });\n  };\n\n   // handles game reset\n   gameReset = () => {\n    this.setState({\n      title: \"Oops, try again.\",\n      currentScore: 0,\n      highScore: this.state.highScore,\n      clickedBeer: []\n    });\n    this.shuffleArray();\n  }\n\n  // increases the state.score to +1\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n        currentScore: newScore,\n        title: 'Keep Moving!'\n    });\n    \n    if(newScore === 15){\n      this.setState({message: 'Winner Winner Chicken Dinner!'})\n      this.gameReset();\n  } else {\n      this.setState({\n        highScore: newScore\n      });\n  } \n     \n  };\n\n\n \n\n\n  // assigning the states for later updating\n  clickedBeer = id => {\n    // tests if click function is connected\n    // console.log(id)\n    // if statement will push id's into an array then check for multiples\n    \n    if (clickedBeer.indexOf(id) === -1) {\n\n    }\n\n    // if (currentScore > highScore) {\n    //   this.setState({\n    //     topScore: currentScore\n    //   });\n    // }\n\n  };\n\n   \n\n \n\n  render() {\n    return (\n      <Wrapper>\n        <Header\n        title={this.state.title}\n        currentScore={this.state.currentScore}\n        highScore={this.state.highScore}\n        />\n        {this.state.beers.map(beer => (\n          <BeerCard\n            clickedBeer={this.clickedBeer}\n            id={beer.id}\n            key={beer.id}\n            name={beer.name}\n            image={beer.image}\n            style={beer.style}\n            notes={beer.notes}\n          />\n        ))}\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}